#Roman numerals to integers

def Roman_to_Int(s: str) -> int:
    d = {'I': 1, 'V': 5, 'x': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    initial = 0
    for c in reversed(s):
        current_value = d[c]
        if current_value < initial:
            total -= current_value
        else:
            total += current_value
        initial = current_value
    return total

R1 = Roman_to_Int('IV')
print(R1)
class Solution:
    def longestCommonPrefix(self, strs: list[str]) -> str:
        if not strs:
            return ""

        shortest = min(strs, key=len)
        for i, char in enumerate(shortest):
            for other in strs:
                if other[i] != char:
                    return shortest[:i]
        return shortest

lcp = Solution()
print(lcp.longestCommonPrefix(strs=["flower", "flow", "flight"]))
print(lcp.longestCommonPrefix(strs=["dog", "racecar", "car"]))

def isValid(s:str) -> bool:
    stack = []
    mapping = {')':'(', '}':'{', ']':'['}
    for char in s:
        if char in mapping:
            if not stack or stack[-1] != mapping[char]:
                return False
            stack.pop()
        else:
            stack.append(char)

    return not stack

s1 = isValid("()")
print(s1)

def is_palindrome(phrase):
    cleaned = [i for i in phrase.lower() if phrase.isalnum()]
    return cleaned == cleaned[::-1]

print(is_palindrome('abba'))


def twosum(num, target):
    for i in range(len(num)):
        for j in range(i + 1, len(num)):
            if num[i] +num[j] == target:
                return i, j

print(twosum([1, 2, 3], 3))
print(twosum([2, 5, 7], 9))
